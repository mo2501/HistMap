<?php

namespace HistoryBundle\Repository;
use HistoryBundle\Entity\thematiquePersonne;

/**
 * thematiqueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class thematiqueRepository extends \Doctrine\ORM\EntityRepository{
    
    public function findAllCustom(){
        
        $repositorP = $this->getEntityManager()
                           ->getRepository("HistoryBundle:personne");
        
        $fields = array("t", "p");
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select($fields)
              ->from('HistoryBundle:thematique', 't')
              ->innerJoin('t.personnes', 'p')
              ->orderBy("t.nom", "ASC");
        $thematiques = $query->getQuery()->getResult();
        
        return $thematiques;
    }
    
    public function findOneByIdCustom($id){
        $repositorP = $this->getEntityManager()
                           ->getRepository("HistoryBundle:personne");
        
        $fields = array("t", "p");
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select($fields)
              ->from('HistoryBundle:thematique', 't')
              ->innerJoin('t.personnes', 'p')
              ->where('t.id = :id')
              ->setParameter('id', $id)
              ->orderBy("t.id", "ASC");
        $thematique = $query->getQuery()->getResult();
        
        if(!empty($thematique)){
            return $thematique[0];
        }
        else{
            return null;
        }
    }
    
    public function addToThematique($personne, $thematique){

        if(!$this->isAssociate($personne, $thematique)){
            $thematiquePersonne = new thematiquePersonne();

            $thematiquePersonne->setPersonne($personne);
            $thematiquePersonne->setThematique($thematique);
            
            $em = $this->getEntityManager();
            $em->persist($thematiquePersonne);
            $em->flush();
        }
    }
    
    public function getIdPersonnesByThematique($thematique_id){
        $thematique = $this->findOneByIdCustom($thematique_id);
        
        $personnes = $thematique->getPersonnes();
        
        $perso = array();
        
        foreach($personnes as $key => $personne){
            $perso[] = $personne->getId();
        }
        
        return $perso;
    }
    
    public function isAssociate($personne, $thema){

        $repositorTP = $this->getEntityManager()
            ->getRepository("HistoryBundle:thematiquePersonne");

        $themaPersonne = $repositorTP->findBy(array("personne" => $personne, "thematique" => $thema));

        if(!empty($themaPersonne)){
            return true;
        }
        else{
            return false;
        }

        /*$thematique = $this->findOneByIdCustom($thema->getId());
        if($thematique == null){
            return false;
        }
        
        foreach($thematique->getPersonnes() as $key => $perso){
            if($personne->getId() == $perso->getId()){
                return true;
            }
        }
        
        return false;*/
    }
    
    public function getThematiqueTous(){
        return $this->findOneById(1);
    }

    public function buildChosenThematiquesArray($data){

        $thematiques = array();

        foreach($data as $key => $idThematique){
            $thema = $this->findOneById($idThematique);

            if(empty($thema)){
                return null;
            }

            $thematiques[] = $thema;
        }

        return $thematiques;
    }

    public function buildArrayThematiques(){

        $thematiquesCategories = [];

        /* @var thematique[] $thematiques */
        $thematiques = $this->findBy(array(), array("nom" => "ASC"));

        foreach($thematiques as $key => $thematique){
            $thematiquesCategories[$thematique->getThematiqueCategory()->getName()][0] = $thematique->getThematiqueCategory();
            $thematiquesCategories[$thematique->getThematiqueCategory()->getName()][] = $thematique;
        }

        ksort($thematiquesCategories);

        return $thematiquesCategories;
    }
}
