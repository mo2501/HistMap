<?php

namespace HistoryBundle\Repository;
use HistoryBundle\Entity\event;

/**
 * AdminRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class eventRepository extends \Doctrine\ORM\EntityRepository{
    
    public function getEvents($from, $to, $data = array()){
        $repositoryE = $this->getEntityManager()
                             ->getRepository('HistoryBundle:event');
        
        $repositoryPe = $this->getEntityManager()
                             ->getRepository('HistoryBundle:personne');
        
        $repositoryPl = $this->getEntityManager()
                             ->getRepository('HistoryBundle:place');
        
        $repositoryTh = $this->getEntityManager()
                             ->getRepository('HistoryBundle:thematique');
        
        if(empty($data)){
            return $data;
        }
        
        if(@$data["gender"]["male"] == "false" && @$data["gender"]["female"] == "false" && empty(@$data["event"])){
            return array();
        }
        
        $thematique_id = 1;
        
        if(isset($data["thematique"])){
            $thematique_id = $data["thematique"];
        }
        
        $personnes = $repositoryPe->findAll();
        $places = $repositoryPl->findAll();
        
        $query = $repositoryE->createQueryBuilder('e')
                    ->select(array())
                    ->where("e.year >= :from")
                    ->setParameter("from", $from)
                    ->andWhere("e.year <= :to")
                    ->setParameter("to", $to);
        
        $events = $query->getQuery()->getArrayResult();

        foreach($events as $key => $event){
            $event_object = $repositoryE->findOneById($event["id"]);

            $query = $repositoryPe->createQueryBuilder('p')
                                 ->select(array())
                                 ->where("p.id = :id")
                                 ->setParameter("id", $event_object->getPersonne()->getId());

            $events[$key]["personne"] = $query->getQuery()->getArrayResult()[0];

            $query = $repositoryPl->createQueryBuilder('pl')
                                 ->select(array())
                                 ->where("pl.id = :id")
                                 ->setParameter("id", $event_object->getPlace()->getId());

            $events[$key]["place"] = $query->getQuery()->getArrayResult()[0];
        }

        usort($events, array($this, "sortEventsObjectsArray"));
        
        if($data["gender"]["female"] == "false" && $data["gender"]["male"] == "true"){
            foreach($events as $key => $event){
                if($event["personne"]["gender"] == 2){
                    unset($events[$key]);
                }
            }
        }
        elseif($data["gender"]["male"] == "false" && $data["gender"]["female"] == "true"){
            foreach($events as $key => $event){
                if($event["personne"]["gender"] == 1){
                    unset($events[$key]);
                }
            }
        }
        
        $personnes_list = $repositoryTh->getIdPersonnesByThematique($thematique_id);
        
        foreach($events as $key => $event){
            if(!in_array($event["personne"]["id"], $personnes_list)){
                unset($events[$key]);
            }
        }
        
        foreach($events as $key => $event){
            if(!in_array($event["eventType"], $data["event"])){
                unset($events[$key]);
            }
        }
        
//        if($data["event"]["naissance"] == "false" && $data["event"]["mort"] == "true"){
//            foreach($events as $key => $event){
//                if($event["eventType"] == 1){
//                    unset($events[$key]);
//                }
//            }
//        }
//        elseif($data["event"]["mort"] == "false" && $data["event"]["naissance"] == "true"){
//            foreach($events as $key => $event){
//                if($event["eventType"] == 2){
//                    unset($events[$key]);
//                }
//            }
//        }
        
        $events = array_values($events);
        
        $ref_lat = 0;
        $ref_lng = 0;
        $equals_ref = false;

        foreach($events as $key => $event){
            if(!$equals_ref){
                if(isset($events[$key+1])
                        && $event["place"]["lat"] == $events[$key+1]["place"]["lat"] 
                        && $event["place"]["lng"] == $events[$key+1]["place"]["lng"]){
                    $equals_ref = true;
                    $ref_lat = $event["place"]["lat"];
                    $ref_lng = $event["place"]["lng"];
                }
            }
            else{
                if($event["place"]["lat"] == $ref_lat 
                        && $event["place"]["lng"] == $ref_lng){
//                        $events[$key]["place"]["lat"] = ($events[$key-1]["place"]["lat"] + 0.005);
                    $events[$key]["place"]["lng"] =($events[$key-1]["place"]["lng"] + 0.01);
                    if(isset($events[$key+1])
                            && $event["place"]["lat"] != $events[$key+1]["place"]["lat"] 
                            && $event["place"]["lng"] != $events[$key+1]["place"]["lng"]){
                        $equals_ref = false;
                    }
                }
                else{
                    $ref_lat = 0;
                    $ref_lng = 0;
                    $equals_ref = false;
                }
            }
        }
        
        return $events;
    }

    public function getEventsNew($data = array()){
        $repositoryE = $this->getEntityManager()
            ->getRepository('HistoryBundle:event');

        $repositoryPe = $this->getEntityManager()
            ->getRepository('HistoryBundle:personne');

        $repositoryPl = $this->getEntityManager()
            ->getRepository('HistoryBundle:place');

        $repositoryTh = $this->getEntityManager()
            ->getRepository('HistoryBundle:thematique');

        if(empty($data)){
            return $data;
        }

        /* @var event[] $events */
        $events = $this->createQueryBuilder('e')
                       ->join('e.personne', 'pe')
                       ->join('e.place', 'pl')
                       ->join('e.eventType', 'et')
                       ->where("pe.gender in (:gender)")
                       ->setParameter("gender", $data["gender"])
                       ->andWhere("et.id in (:eventType)")
                       ->setParameter("eventType", $data["eventType"])
                       ->andWhere("e.year BETWEEN :from AND :to")
                       ->setParameter("from", $data["from"])
                       ->setParameter("to", $data["to"])
                       ->andWhere("pe.nom LIKE :nom")
                       ->setParameter("nom", "%".$data["nom"]."%")
                       ->getQuery()
                       ->getResult();

        $events_response = array();

        foreach($events as $key => $event){
            $events_response[$key]["intitule"] = $event->getIntitule();
            $events_response[$key]["year"] = $event->getYear();
            $events_response[$key]["personne"]["nom"] = $event->getPersonne()->getNom();
            $events_response[$key]["personne"]["wiki"] = $event->getPersonne()->getWiki();
            $events_response[$key]["personne"]["gender"] = $event->getPersonne()->getGender();
            $events_response[$key]["personne"]["ref"] = $event->getPersonne()->getRef();
            $events_response[$key]["place"]["nom"] = $event->getPlace()->getNom();
            $events_response[$key]["place"]["lat"] = $event->getPlace()->getLat();
            $events_response[$key]["place"]["lng"] = $event->getPlace()->getLng();
            $events_response[$key]["eventType"]["nom"] = $event->getEventType()->getNom();
        }

        return $events_response;
    }
    
    public function sortEventsObjects($a, $b){
        return strcmp($a->getPlace()->getNom(), $b->getPlace()->getNom());
    }
    
    public function sortEventsObjectsArray($a, $b){
        return strcmp($a["place"]["lat"], $b["place"]["lat"]);
    }
    
    public function decalerMarker(){
        
    }
    
}
